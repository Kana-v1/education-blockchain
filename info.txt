Blockchain - its distributed database, where everyone can securely access data and execute transactional code. All transactions are stored in blocks of data. This blocks are made in a way that makes them very hard to manpulate once they have been stored. Blockchain has not been created to store much information about each transaction (images for example).   

Each block in a blockchain consists data and its resulting hash, it also contains a nounce, which is an input to the hashing algorithm and a number, meaning which order is has in a blockchain, timestamp and has of the previous block. 

Blockchain can be either public or private. 

Everyone can connect to the public blockchain with an internet connection. U have to pay for transaction and storage for every block u want to add to the chain. There is no way it can be hacked. Public blockhain relies on community (for example, its only community decision what to do with forks)

Private blockchain is similar to traditional databases. Since you own an infrastruction its your business to control the cost of blockchain operations. You know chain entities and control who can get access to your chain.   

Ethereum is of the most well-established blockchain. 

Distributed application (DAPP) shared data is available on the distributed blockchain and exists in many locations, so it doesn't matter if some server go down. So the only difference between the architecture of a classic app and dapp is that in a dapp back-end connnecting to public web3 infrastructure. THe front-end and datastore can be integrated in dapp just like in any other apps.
dApp uses passwordless identification (security and access provided by cryptography rather than username and password or oAuth). 
Coz data can be stored on either centralized solutions or P2P platforms, such as the InterPlanetary File System (IPFS)

web3 has distributed ledger (aka blockchain) and validator nods (servers that provider computation services and security for the nerwork) as key concepts. 

Custom code is directly deployed to the blockchain and can be called by users. Validator nodes take care of the execution, and any interactions with the code are then saved on the blockchain.

NEAR app usually contains 3 layers:

- App layer (backend + frontend) - UI and services that interact with NEAR. Communication between the app later and the protocol layer is channeled through an RPC interface in NEAR. 

- Protocol Layer (P2P Network Components) - a layer where data and transactions validated and added to the public ladger. 

- Runtime Layer (VM, Storage) - can be considered as the protocol layer. Every time a NEAR Validator Node validates a transaction they read and write in the State Storage and on the VM. App layer is often referred to as the resource layer because the "real computations" occur here.

NEAR support any language that Wasm can deal with (AssemblyScript and Rust nowadays). 

Gas - transaction fees from network users. 

What happends if u call function from the smart contract via a cli:

1) dApp sign the transaction and represents a Function Call transaction

2) The transaction is sent to the NEAR platform through the RPC interface, which validates and verifies the transaction before routing it (based on the contract account) to the correct validator for processing

3) The runtime layer launches a Wasm virtual machine.

4) The VM loads the contract code to invoke the function identified in the transaction, reading and writing to state storage as needed and returning the result of the function call.

5) The blockchain layer routes the result back through the RPC interface to your dApp.

Contract - a set of functions that can read or alter the state of the NEAR Network. It executed on the NEAR VM. 

After the contract was compiled to Wasm, it can be deployed to the NEAR blockchain (which means uploaded and stored in the NEAR blockchain). 

Transaction is a sequence of actions. There are 8 available actions: CreateAccount, DeleteAccount, AddKey (add key to an account), DeleteKey, Transfer (tokens from account to another), Stake(u want to become a validator), DeployContract, FunctionCall(invoke a method on a contract)

Contract deployment includes:
1) Compile contract bytecode (rust to wasm bytecode)
2) Call DeployContract action. 
3) Sign and send transaction that will deploy ur code to the network
4) Redeployment and trustless operations (As long as FullAccess private keys are available, you can redeploy. Remove these keys for trustless operation)


===========================================================================================
NEAR Blockchain concepts:

shard == block

Genesis - rules that each part of the decentralized system agree upon (similar to a json file). So to start a blockchain u need genesis and software that can understand this file and start a blockchain
 
Record - the state of the network 

Epochs - a unit of time when the number of validators in the network remain constant. This time is usually around 12 hours, but an truth measurement method is height of blocks.

Every validator has a number of blocks that is would produce.

Blocks does not contain transactions by itself. Blocks contain chunks and block does not really care what there is inside a chunk. Chunk is an entity that collects transactions. 

Seat price - a minimum stake to become a validator


Validators listen requests from users that want to change network state (transaction in the other word). Other nodes can listen to transactions, but non-validator node will reroutes transaction to a validator node. Then validators will add transaction into a bucket they are currently working on in a block. 

Different validators validate transactions and create a block. And validator that create a block can not verify if there is any transactions inside, so those can be blocks without transactions. 

When transaction appears in the network and validator receives it, then such things happen:

1) transaction convert to a receipt (repeipt is same as a transaction, but assigner is validator rather than user) and checked if there is enough tokens to pay a fee and if transaction is signed by user

2) validator include this transaction in the block

3) receipt can be executed either in the current block or in the next block. So even if block has 0 transactions it can contains receipts from the previous block. 






























